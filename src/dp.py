accs = [0,0.5663265306122449, 0.7210884353741497, 0.7891156462585034, 0.8656462585034014, 0.858843537414966, 0.8299319727891157, 0.8401360544217688, 0.8486394557823129, 0.8010204081632653, 0.8979591836734694, 0.8979591836734694, 0.8928571428571429, 0.9098639455782312, 0.9251700680272109, 0.8809523809523809, 0.9149659863945578, 0.9387755102040817, 0.9047619047619048, 0.8792517006802721, 0.8758503401360545, 0.8928571428571429, 0.8792517006802721, 0.8758503401360545, 0.8877551020408163, 0.8843537414965986, 0.9217687074829932, 0.9132653061224489, 0.8860544217687075, 0.8996598639455783, 0.9030612244897959, 0.8503401360544217]
top1_ratios = [1.901311971939101e-05, 0.03475535161783361, 0.004884125918519905, 0.0009399270927619579, 0.0003762266347225816, 0.002507425069433102, 0.007886289458982268, 0.034134956771462194, 0.034509078817228075, 0.04913390811153893, 0.012986285530511104, 0.019571446563590767, 0.029581493074767616, 0.0054871764196417, 0.015524880500307208, 0.028414047587928246, 0.06388771550511758, 0.0709986002526634, 0.14071690014890662, 0.2802636362185971, 0.2986692745856989, 0.365106444317853, 0.4144767403128437, 0.35560653361774475, 0.4951908113054345, 0.5209842744834382, 0.5478910940291751, 0.6180380387530074, 0.7799792571119152, 0.8839920792738672, 0.9753751835420208, 0.8577125736121682]


def f(index, size):
    if size>8:
        size = 8
    f1 = (1-size/8)*(1-accs[index-1])
    f2 = 2*max(0,(8-size)*(7-size)/56)*(1-accs[index-1])
    f3 = max((8-size)*(7-size)/56,0)*accs[index-1]
    f4 = 2*(8-size)*size/56*(1-accs[index-1])
    return top1_ratios[index-1]*f1 + (1-top1_ratios[index-1])*(f2+f3+f4)


def get_cache_size(T,adap_gate):
    if not adap_gate:
        global top1_ratios
        top1_ratios = [0 for _ in range(len(accs))]

    
    dp = [[0]*(T+1) for _ in range(len(accs)+1)]
    dp_sizes = [[0]*(T+1) for _ in range(len(accs)+1)]
    for i in range(len(accs)):
        dp[i+1][0] = dp[i][0] + f(i+1,0)

    sizes = [0 for _ in range(len(accs))]

    for i in range(1,len(accs)+1):
        for j in range(1,T+1):
            min = 10000
            for k in range(1,j+1):
                temp1 = dp[i-1][j-k] 
                temp2 = f(i,k)
                temp = temp1 + temp2
                if temp < min:
                    min = temp
                    dp_sizes[i][j] = k
            dp[i][j] = min

    remaining_capacity = T
    for j in range(len(accs), 0, -1):
        sizes[j-1] = dp_sizes[j][remaining_capacity]
        remaining_capacity -= sizes[j - 1]
    return sizes
